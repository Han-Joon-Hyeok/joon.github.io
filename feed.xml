<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://han-joon-hyeok.github.io/</id><title>Dev Joon</title><subtitle>blog, jekyll, portfolio, github, 개발, TIL, 공부, 블로그,</subtitle> <updated>2025-01-19T13:28:26+09:00</updated> <author> <name>Joon Hyeok Han</name> <uri>https://han-joon-hyeok.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://han-joon-hyeok.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="https://han-joon-hyeok.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.0">Jekyll</generator> <rights> © 2025 Joon Hyeok Han </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[ArgoCD] AppProject 생성 및 RBAC 설정 가이드</title><link href="https://han-joon-hyeok.github.io/posts/argocd-appproject-and-rbac-setting/" rel="alternate" type="text/html" title="[ArgoCD] AppProject 생성 및 RBAC 설정 가이드" /><published>2025-01-19T13:25:00+09:00</published> <updated>2025-01-19T13:25:00+09:00</updated> <id>https://han-joon-hyeok.github.io/posts/argocd-appproject-and-rbac-setting/</id> <content src="https://han-joon-hyeok.github.io/posts/argocd-appproject-and-rbac-setting/" /> <author> <name>Joon Hyeok Han</name> </author> <category term="ArgoCD" /> <summary> 개요 ArgoCD는 여러 팀이 공유하여 사용하는 환경에서 애플리케이션을 효과적으로 관리할 수 있도록 Project(AppProject) 개념을 제공합니다. 이를 통해 애플리케이션을 논리적으로 구분하고, 특정 소스, 클러스터, 네임스페이스에 제한을 두는 등 다양한 관리 기능을 제공합니다. 또한, 프로젝트별 RBAC(Role-Based Access Control)을 설정해 사용자 권한을 세분화할 수 있습니다. 이 글에서는 AppProject 생성 방법과 이를 활용한 RBAC 설정, 그리고 Helm Chart를 이용한 애플리케이션 배포 과정을 단계별로 정리했습니다. 다음과 같은 내용을 포함하고 있습니다. AppProject 생성: 특정 소스와 네임스페이스로 배포를 제한하는 방법 Helm Ch... </summary> </entry> <entry><title>[ArgoCD] Kustomize를 사용한 Notification 템플릿 관리 및 배포</title><link href="https://han-joon-hyeok.github.io/posts/argocd-kustomize-with-notification-configmap/" rel="alternate" type="text/html" title="[ArgoCD] Kustomize를 사용한 Notification 템플릿 관리 및 배포" /><published>2025-01-12T11:30:00+09:00</published> <updated>2025-01-12T11:30:00+09:00</updated> <id>https://han-joon-hyeok.github.io/posts/argocd-kustomize-with-notification-configmap/</id> <content src="https://han-joon-hyeok.github.io/posts/argocd-kustomize-with-notification-configmap/" /> <author> <name>Joon Hyeok Han</name> </author> <category term="ArgoCD" /> <summary> 개요 Kustomize를 사용하면 Kubernetes 리소스를 효율적으로 구성하고 관리할 수 있습니다. 이 글에서는 ArgoCD Notification의 트리거와 템플릿 구성을 여러 ConfigMap 파일로 분리한 뒤, Kustomize를 이용해 하나의 ConfigMap으로 병합하고 배포하는 과정을 다룹니다. 이를 통해 복잡한 Notification 설정을 쉽게 관리하고, 배포 시 효율성을 높이는 방법을 배울 수 있습니다. ConfigMap 파일을 여러 개로 분리하기 Notification 설정의 트리거와 템플릿 종류가 다양해지면, 하나의 파일에서 모든 설정을 관리하는 것이 어렵습니다. 이를 해결하기 위해 파일을 분리한 뒤 Kustomize로 병합하는 방식을 적용했습니다. 디렉토리 구조는 아래와... </summary> </entry> <entry><title>[AWS] Route 53 계정 간 도메인 이전 및 ACM 인증서 발급 방법</title><link href="https://han-joon-hyeok.github.io/posts/aws-transfer-domain-to-another-account/" rel="alternate" type="text/html" title="[AWS] Route 53 계정 간 도메인 이전 및 ACM 인증서 발급 방법" /><published>2025-01-05T00:10:00+09:00</published> <updated>2025-01-05T00:21:53+09:00</updated> <id>https://han-joon-hyeok.github.io/posts/aws-transfer-domain-to-another-account/</id> <content src="https://han-joon-hyeok.github.io/posts/aws-transfer-domain-to-another-account/" /> <author> <name>Joon Hyeok Han</name> </author> <category term="aws" /> <summary> 개요 AWS Route 53에서 구매한 도메인을 서로 다른 AWS 계정으로 이전하는 방법과 AWS Certificate Manager(ACM)을 이용해 HTTPS 통신을 위한 인증서를 발급하는 과정을 정리했습니다. 상황 AWS 계정 A와 B가 있다고 가정합니다. 계정 A에서 Route 53을 통해 구매한 도메인의 소유권을 계정 B로 이전하려고 합니다. 계정 B에서 이전받은 도메인을 CloudFront와 연결해 HTTPS 통신을 설정하려고 합니다. 과정 1. 도메인 소유권 이전 Source Account (계정 A) [Route 53] - [Domains] - [Registered domains] 메뉴로 이동합니다. 이전하려는 도메인을 선택하여 상세 페이지로 진입합니다.... </summary> </entry> <entry><title>[Spring] DTO 입력 값 검증하기 (Bean Validation 활용)</title><link href="https://han-joon-hyeok.github.io/posts/spring-bean-validation-on-controller/" rel="alternate" type="text/html" title="[Spring] DTO 입력 값 검증하기 (Bean Validation 활용)" /><published>2024-12-29T18:10:00+09:00</published> <updated>2024-12-29T18:10:00+09:00</updated> <id>https://han-joon-hyeok.github.io/posts/spring-bean-validation-on-controller/</id> <content src="https://han-joon-hyeok.github.io/posts/spring-bean-validation-on-controller/" /> <author> <name>Joon Hyeok Han</name> </author> <category term="Java" /> <category term="Spring" /> <summary> 개요 컨트롤러에서 DTO를 통해 전달받는 클라이언트의 요청의 입력 값에 제약 조건을 설정하기 위해 Spring Bean Validation을 활용하는 방법을 정리했습니다. 도입 배경 프론트엔드에서 작성된 게시물 본문의 길이는 최대 1,000자까지만 제한하는 규칙을 정했습니다. 이를 처리하기 위해 백엔드에서 아래와 같은 DTO를 통해 요청을 받습니다. @Getter @NoArgsConstructor @AllArgsConstructor public class AddPostRequest { private String content; } 컨트롤러는 아래와 같습니다. @PostMapping("/challenges/{id}/posts") public SuccessResponse&amp;lt;List&amp;lt... </summary> </entry> <entry><title>[ArgoCD] Notification default trigger 설정 방법</title><link href="https://han-joon-hyeok.github.io/posts/argo-notification-default-trigger-setting/" rel="alternate" type="text/html" title="[ArgoCD] Notification default trigger 설정 방법" /><published>2024-12-21T17:10:00+09:00</published> <updated>2024-12-21T17:10:00+09:00</updated> <id>https://han-joon-hyeok.github.io/posts/argo-notification-default-trigger-setting/</id> <content src="https://han-joon-hyeok.github.io/posts/argo-notification-default-trigger-setting/" /> <author> <name>Joon Hyeok Han</name> </author> <category term="argocd" /> <summary> 개요 ArgoCD Notification 기능을 활용하면 배포하는 애플리케이션에 대해 기본으로 작동할 트리거를 설정할 수 있습니다. 기본 트리거를 설정하면 모든 Application 객체나 Rollout 객체에 동일한 트리거를 한 번에 설정할 수 있어 설정 과정이 간소화됩니다. default trigger 적용 전 # demo-hpa-rollout.yaml apiVersion: argoproj.io/v1alpha1 kind: Application metadata: name: demo-hpa-rollout namespace: argocd annotations: # 알림으로 받고자 하는 트리거 종류와 메세지 템플릿을 지정해야 한다. notifications.argoproj.... </summary> </entry> </feed>
